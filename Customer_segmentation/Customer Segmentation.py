# -*- coding: utf-8 -*-
"""mini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17dFATVIax-2Ly8KQchqxO43beFpOIJOD
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

#Data loading and inspection
data = pd.read_csv(r"/content/Copy of marketing_campaign.csv")
print("Checking missing values")
cl = data.isna().any()
print(cl)
data['Income'].fillna(data['Income'].median(), inplace=True)
print("/nAfter filling the missing values")
cl = data.isna().any()
print(cl)
print("/nDuplicate values count",data.duplicated().sum())
print("/n Data inspection")
print(data.head(5))
print("No of rows and columns in the dataset",data.shape)

#Explotary Data Analysis

# Recency: Already provided in the dataset
sns.histplot(data['Recency'], kde=True)
plt.title('Recency')
plt.show()

# Frequency: Total number of purchases made by a customer
data['Frequency'] = data['NumWebPurchases'] + data['NumCatalogPurchases']
+ data['NumStorePurchases']
sns.histplot(data['Frequency'], kde=True)
plt.title('Frequency')
plt.show()

# Monetary: How much money a customer spends on purchases
data['Monetary'] = data['MntWines'] + data['MntFruits'] + data['MntMeatProducts']
+ data['MntFishProducts'] + data['MntSweetProducts']
sns.histplot(data['Monetary'], kde=True)
plt.title('Monetary')
plt.show()

print(data['Recency'].describe())
print(data['Frequency'].describe())
print(data['Monetary'].describe())

# RFM Analysis

# Select the relevant RFM features
rfm_features = ['Recency', 'Frequency', 'Monetary']
# Normalize the RFM values
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(data[rfm_features])

#K-Means Clustering using RFM
inertia = []
K = range(1, 11)
for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(rfm_scaled)
    inertia.append(kmeans.inertia_)
# Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.show()

#Cluster assignment
# Choose the optimal number of clusters
optimal_clusters = 4
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
data['Cluster'] = kmeans.fit_predict(rfm_scaled)

#Cluster analysis
# --- Analyze the RFM clusters ---
cluster_summary = data.groupby('Cluster')[rfm_features].mean()
print(cluster_summary)

# --- Visualize the RFM clusters ---
plt.figure(figsize=(15, 10))
for i, feature in enumerate(rfm_features, start=1):
    plt.subplot(2, 3, i)
    sns.barplot(x='Cluster', y=feature, data=data, palette='viridis')
    plt.title(f'{feature} by Cluster')
    plt.tight_layout()
plt.show()

# --- Visualize the Clusters Using RFM Metrics ---
plt.figure(figsize=(10, 8))
sns.scatterplot(data=data, x='Frequency', y='Monetary', hue='Cluster', palette='viridis', alpha=0.7)
plt.title('Customer Segments Based on Frequency and Monetary')
plt.xlabel('Frequency (Number of Purchases)')
plt.ylabel('Monetary (Total Spending)')
plt.legend(title='Cluster')
plt.show()

# Visualize the clusters for categorical features
plt.figure(figsize=(15, 8))
categorical_features = ['NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumDealsPurchases']
for i, feature in enumerate(categorical_features, start=1):
    plt.subplot(2, 3, i)
    sns.barplot(x='Cluster', y=feature, data=data, hue='Cluster', palette='viridis', dodge=False)
    plt.title(f'Average {feature} by Cluster')
    plt.xlabel('Cluster')
    plt.ylabel(f'Average {feature}')
    plt.legend().remove()  # Remove the legend since hue is just for coloring
    plt.tight_layout()

plt.show()

# Visualize the clusters
plt.figure(figsize=(15, 10))
spending_categories = ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts']
for i, category in enumerate(spending_categories, start=1):
    plt.subplot(2, 3, i)
    sns.scatterplot(data=data, x='Income', y=category, hue='Cluster', palette='viridis')
    plt.title(f'Customer Segments based on Income and {category}')
    plt.xlabel('Income')
    plt.ylabel(category)
    plt.tight_layout()

plt.show()

#visualize campaign response by cluster
campaign_columns = ['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5']
# Calculate the mean acceptance rate for each cluster and campaign
campaign_cluster_summary = data.groupby('Cluster')[campaign_columns].mean()
# Plot a heatmap to visualize the acceptance rates of campaigns by cluster
plt.figure(figsize=(10, 6))
sns.heatmap(campaign_cluster_summary, annot=True, cmap='viridis', linewidths=0.5)
plt.title('Campaign Response by Cluster')
plt.xlabel('Campaigns')
plt.ylabel('Clusters')
plt.show()

# Visualize the Product category preferred by customers in each cluster
plt.figure(figsize=(15, 10))
spending_categories = ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts']
for i, category in enumerate(spending_categories, start=1):
    plt.subplot(2, 3, i)
    sns.barplot(data=data, x='Cluster', y=category, hue='Cluster', palette='viridis')
    plt.title(f'Product {category} preferred by customers in each cluster')
    plt.xlabel('Cluster')
    plt.ylabel(category)
    plt.tight_layout()

plt.show()

# --- Saving the clustered data ---
output_path = r"/content/Cluster-file.csv"
data.to_csv(output_path, index=False)

# Cluster Summary
print("Cluster Summary based on RFM Analysis:")
numeric_data = data.select_dtypes(include=['float64', 'int64'])
cluster_mean = numeric_data.groupby(data['Cluster']).mean()
print(cluster_mean)